<?php

    // Get config file
    require_once("config.php");
    // Get header files  
    include("html/header.html");
   
    $idsp_result = "none";

    if (!isset($_SESSION["PROJDATA"]))
    {
        $error[]="ERROR: You do not have a project yet. Please go back to the home "
                . "page and create one!!!";
    }
    
    else
    {
        if(strcmp($_SESSION["PROJDATA"]["irun"], "no")==0)
        {
            $error[]="ERROR: You haven't run your model yet! Please setup your "
                    . "model in the \"Project Page\" and click the \"Run APEX Model\""
                    . "to get results";
        }
        elseif(strcmp($_SESSION["PROJDATA"]["irun"], "yes")==0)
        {


            //// Now the variables are send to the 
            // user project input array.
            // In this step, since all of the selection data are send
            // as index, they need to be converted to
            // values. These include state, county, zip, and soil.
            // Conver these to local variables
            $stabbr = $usst_abbre[$_SESSION["PROJDATA"]["stateindx"]];
            $state = $us_state_abbrevs_names[$stabbr];

            $counties = $uilist->countyarray($db, $stabbr);
            $county = $counties[$_SESSION["PROJDATA"]["countyid"]]["countyname"];

            $ziparray = $uilist->ziparray($db, $stabbr, $county);
            $zipcode = $ziparray[$_SESSION["PROJDATA"]["zipcodeid"]]["zipcode"];

            $ziplatlon = $runapex->getziplatlong($db, $stabbr, $county, $zipcode);
            $ziplat = $ziplatlon["latitude"];
            $ziplong = $ziplatlon["longitude"];

            /////////////////////////////////////////////////
            // Soil variables
            $solidx = $_SESSION["PROJDATA"]["soilid"];
            $soilnmmk = $runapex->getsoilmukeyname($Connection, $stabbr, $county, $zipcode, $solidx);

            $solmk = $soilnmmk["mukey"];
            $solnm = $soilnmmk["name"];
            //Other use input could be input here:
            // Soil test values
            $soiltest_n = $_SESSION["PROJDATA"]["soiltestn"];
            $soiltest_p = $_SESSION["PROJDATA"]["soiltestp"];
            $int_soln = intval($soiltest_n);
            $int_solp = intval($soiltest_p);

            /////////////////////////////////////////////////
            // Weather variables
            $dlystartyr = $_SESSION["PROJDATA"]["weastartyr"];
            $dlyendyr = $_SESSION["PROJDATA"]["weaendyr"];      
            $genweasimyr = $_SESSION["PROJDATA"]["weasimyrs"];        
            // Start processing daily weather files if selected
            $weadatascflag = $_SESSION["PROJDATA"]["weasource"];
            $displayyrs = 0;
            if (strcmp($weadatascflag, 1) == 0)
            {
                $displayyrs = $genweasimyr;
            }
            elseif (strcmp($weadatascflag, 2) == 0)
            {

                $dlystartdate = strtotime("" . $dlystartyr . "-01-01");
                $dlyenddate = strtotime("" . $dlyendyr . "-12-31");
                $displayyrs =  $jsonupdate->yearsDifference($dlyendyr, $dlystartyr);
            }

            if ($genweasimyr > 1)
            {$yearUnit = "Years";}
            else
            {$yearUnit = "Year";}
            

            /////////////////////////////////////////////////
            // Management variable
            $mankey=$_SESSION["PROJDATA"]["dfmk"];
            $mgtname = $_SESSION["PROJDATA"]["management"][$mankey]["mgtname"];
            $drainDft = intval($_SESSION["PROJDATA"]["draindpth"]);
            $drainDepth = $drainDft*304.8;

            /////////////////////////////////////////////////
            // Topographic variable        
            // Update the json variables for specific parameters
            // Area from acre to ha
            $subArea = intval($_SESSION["PROJDATA"]["fieldarea"])*0.40468;
            // Drainage depth from feet to meter
            $subSlpLen = intval($_SESSION["PROJDATA"]["fieldslplen"])*0.3048;
            $subSlpStp = intval($_SESSION["PROJDATA"]["fieldslopeid"]);



            //Create run folder for each session.
            $runfdname = date('Ymd')."_"
                    . $_SESSION["PROJDATA"]['projectname']."_"
                    . session_id();
            $rundir = FD_USRRUN. "/" . $runfdname;

            if (!file_exists($rundir)) 
            {
                mkdir($rundir, 0777);
            }

            $sessrunlist = $rundir . "/SESSIONRUN.LIST"; 
            
            $hydro_wq_wss = array();
            

            // This run list was generated by the run python functions.
            // If it exists, and contains the run name, directly get the results
            // else, run and update.
            
            // Modified on May 15 by Qingyu Feng
            // Goal: add a variable to run name to make sure runs with the 
            // same parameters will not have the same name.
            // The variable will be added to the last so that the 
            // code modification do not affect later runs.
            $wsscount = 0;
            if (glob($rundir."/*.WSS") != false)
            {
                $wsscount = count(glob($rundir . "/*.WSS"))+1;
            }


            // Generate runname
            // When the user changed one of the variable,
            // A new run is made for comparison issue

            $runname = $stabbr."_"
                    . "".$county."_"
                    . "".$zipcode."_"
                    . "".round($subArea)."_"
                    . "".round($subSlpStp)."_"
                    . "".round($subSlpLen)."_"
                    . "".round($solmk)."_"
                    . "".round($int_soln)."_"
                    . "".round($int_solp)."_"
                    . "".$mankey."_"
                    . "".round($drainDft)."_"
                    . "".$weadatascflag."_"
                    . "".$genweasimyr."_"
                    . "".$dlystartyr."_"
                    . "".$dlyendyr."_"
                    . "".$wsscount."";
            
            if(strcmp($_SESSION["PROJDATA"]["newrun"], "yes")==0)
            {
            
            /*
            **------------------------------------------------------------------
            ** Step 1: Readin, modify, write sol file for model user input
            **------------------------------------------------------------------
            */	        
            //Copy json template to userrun
            $jsondft_sol = FD_JSON.'/tmp1_solfile.json'; 
            $jsonrunf_sol = $rundir . "/run_sol.json";		
            if (!copy($jsondft_sol, $jsonrunf_sol))
            {
                echo "failed to copy $jsondft_sol...\n";
            }

            /*
            ** Processing Soil files
            */		
            //get contents of your json file and store it in a string
            $jsonupdate_sol = json_decode(file_get_contents($jsonrunf_sol), true);	
            // decode it  
            // The json will be updated in the function to get the value for selected soil
            $jsonupdate_sol = $jsonupdate->UpdateJsonSol_newsol($Connection, 
                    $solmk, 
                    $jsonupdate_sol, 
                    null);	
            //echo $jsonupdate_sol["line1"];


            if (!$soiltest_n == 0) 
               {
                    $jsonupdate_sol =  $jsonupdate->UpdateJsonSol_soiltestN($jsonupdate_sol, $soiltest_n);	
                    }

            if (!$soiltest_p == 0) 
               {
                    $jsonupdate_sol =  $jsonupdate->UpdateJsonSol_soiltestP($jsonupdate_sol, $soiltest_p);	
                    }	


            // The new json contains user input values and will be written back.
            $jsonupdate_sol = json_encode($jsonupdate_sol, true, JSON_UNESCAPED_UNICODE);
            //now send evrything to ur data.json file using folowing code
            // Write json output into the run folder
            if (json_decode($jsonupdate_sol) != null)
            {
                $file = fopen($jsonrunf_sol,'w');
                fwrite($file, $jsonupdate_sol);
                fclose($file);
            }
            else
            {
                echo "json was wrong"; 
            }        
            /*
            **------------------------------------------------------------------
            ** Step 2: Generate weather input user input
            **------------------------------------------------------------------
            */	
            //There are several files to be prepared.
            // 1. Monthly weather datafile. This have to be prepared
            // 2. Wind files, prepared
            // 3. Daily observed files: depends on user selection
            // All data are now in the database. The job here include:
            // a. Decide the station name based on latitude and longitude.
            // b. extract data and write them into format required by APEX.

            // Get latitude and longitude: ziplat ziplong, $stateabb 
            // Find station name based on latitude and longitude, this needs James function
            $weastnlist = FD_CLINEAR."/stations2015.db";
            exec(FD_CLINEAR."/climNearest.exe $ziplong $ziplat $rundir $weastnlist"); 

            $stnlistfile = $rundir . "/station.txt";
            $stnlist = file($stnlistfile);

            $stnname = $stnlist[3];
            $stnloc = $stnlist[1];
            $fn_wp1 = "" . trim($rundir) . "/" . trim($stnname) . ".WP1";
            $fn_wnd = "" . trim($rundir) . "/" . trim($stnname) . ".WND";

            $fn_wp1lst = "" . trim($rundir) . "/WPM1WEPP.DAT";
            $fn_wndlst = "" . trim($rundir) . "/WINDWEPP.DAT";

            // Get monthly stat data from database
            //echo "stateabbr:  ".$stabbr."<br>";

            $jsonupdate->WriteWP1WNDfile($Connection, 
                $stnname, 
                $stabbr,
                $fn_wp1, 
                $fn_wnd, 
                $fn_wp1lst, 
                $fn_wndlst);


            if (strcmp($weadatascflag, "2") == 0)   
            {

                $fn_dlylst = "" . trim($rundir) . "/WDLSTCOM.DAT";
                $fn_dly = "" . trim($rundir) . "/" . trim($stnname) . ".DLY";
                $jsonupdate->WriteDLYfile($Connection,
                                $stnname, 
                                $stabbr,
                                $dlystartyr, 
                                $dlyendyr, 
                                $fn_dlylst, 
                                $fn_dly, 
                                $ziplat, 
                                $ziplong, 
                                $stnloc);
            }
            elseif (strcmp($weadatascflag, "1") == 0)
            {
                $dlystartyr = 2000;
                $dlyendyr = 2005;
                $fn_dlylst = "" . trim($rundir) . "/WDLSTCOM.DAT";
                $fn_dly = "" . trim($rundir) . "/" . trim($stnname) . ".DLY";
                $jsonupdate->WriteDLYfile($Connection, 
                                $stnname, 
                                $stabbr, 
                                $dlystartyr, 
                                $dlyendyr, 
                                $fn_dlylst, 
                                $fn_dly, 
                                $ziplat, 
                                $ziplong, 
                                $stnloc);
            }


            /*
            **------------------------------------------------------------------
            ** Step 3: Readin, modify, write OPC file for model user input
            **------------------------------------------------------------------
            */	

            // With the modification of the user project in, 
            // data for management are now stored in the user 
            // project file. 
            // The data depends on whether the man is user or
            // default.
            // If default, us the template id to get all of 
            // the informatio to write the ops file.
            // If user modified, the user information will be used
            // Either one, the json file is needed as a bridge.

            //Copy json template to userrun
            $jsondft_mgtops = FD_JSON.'/tmp2_opsfile.json'; 
            $jsonrunf_mgtops= $rundir . "/run_mgtops.json";		

            if (!copy($jsondft_mgtops, $jsonrunf_mgtops))
            {
                echo "failed to copy $jsondft_mgtops...\n";
            }

            //get contents of your json file and store it in a string
            $jsonupdate_mgtops = json_decode(
                    file_get_contents($jsonrunf_mgtops), true);	
            // decode it  
            // The json will be updated in the function to get the value for selected soil


            //echo "json template".var_dump($jsonupdate_mgtops)."<br>";
            //echo "Man key: ".$mankey."<br>";
            if (strcmp($_SESSION["PROJDATA"]["management"][$mankey]["mansource"], "dft")==0)
            {
                // Using default by getting the data from the detail database.
                // Create a function to update json using database information    
                //echo "Using default...............<br>";
                $mgtname = $_SESSION["PROJDATA"]["management"][$mankey]["mgtname"];
                $templateid = $_SESSION["PROJDATA"]["management"][$mankey]["templateid"];
                $jsonupdate_mgtops=$jsonupdate->updateManDatabase($db, 
                        $templateid, $mankey, 
                        $mgtname, 
                        $jsonupdate_mgtops 
                        );
            }
            elseif(strcmp($_SESSION["PROJDATA"]["management"][$mankey]["mansource"], "user")==0)
            {
                // using the user edit management
                //echo "Using user man<br>....";
                // At this time the user mgtarray will be used.
                $mgtarrayusr = $_SESSION["PROJDATA"]["management"][$mankey]["mgtarray"];


                $jsonupdate_mgtops=$jsonupdate->updateManUser( 
                        $mgtarrayusr, $mankey, $mgtname,
                        $jsonupdate_mgtops 
                        );

            }
            //echo "...............................................<br>";
            //echo "json template".var_dump($jsonupdate_mgtops)."<br>";        
            // The new json contains user input values and will be written back.
            $jsonupdate_mgtops = json_encode($jsonupdate_mgtops, true, JSON_UNESCAPED_UNICODE);
            //now send evrything to ur data.json file using folowing code
            // Write json output into the run folder
            if (json_decode($jsonupdate_mgtops) != null)
            {
                $file = fopen($jsonrunf_mgtops,'w');
                fwrite($file, $jsonupdate_mgtops);
                fclose($file);
            }
            else
            {
                echo "json was wrong"; 
            }

            /*
            **------------------------------------------------------------------
            ** Step 4: Readin, modify, write SUB file for model user input
            **------------------------------------------------------------------
            */	
            //Copy json template to userrun
            $jsondft_sub = FD_JSON.'/tmp3_subfile.json'; 
            $jsonrunf_sub= $rundir . "/run_sub.json";		

            if (!copy($jsondft_sub, $jsonrunf_sub)){
            echo "failed to copy $jsondft_sub...\n"	;
            }

            //get contents of your json file and store it in a string
            $jsonupdate_sub = json_decode(file_get_contents($jsonrunf_sub), true);	
            $jsonupdate_sub = $jsonupdate->UpdateJsonSub($ziplat, $ziplong, $runname, $subArea, $subSlpStp, $drainDepth, $subSlpLen, $weadatascflag);
            // The new json contains user input values and will be written back.
            $jsonupdate_sub = json_encode($jsonupdate_sub, true, JSON_UNESCAPED_UNICODE);
            //now send evrything to ur data.json file using folowing code
            // Write json output into the run folder
            if (json_decode($jsonupdate_sub) != null)
            {
                $file = fopen($jsonrunf_sub,'w');
                fwrite($file, $jsonupdate_sub);
                fclose($file);
            }
            else
            {
                echo "json was wrong"; 
            }

            // The next step is to call python function to write the .sol file.
            // call the python script to run  

            /*
            **------------------------------------------------------------------
            ** Step 5: Readin, modify, write SITE file for model user input
            **------------------------------------------------------------------
            */	
            $jsondft_sit = FD_JSON.'/tmp4 _sitefile.json'; 
            //Copy json template to userrun
            $jsonrunf_sit= $rundir . "/run_site.json";		

            if (!copy($jsondft_sit, $jsonrunf_sit))
            {
                echo "failed to copy $jsondft_sit...\n";
            }

            //get contents of your json file and store it in a string
            $jsonupdate_site = json_decode(file_get_contents($jsonrunf_sit), true);	

            $site_elev = $runapex->getelevfrmssurgo($solmk, $db)["elev_r"];

            // Update the json variables for specific parameters
            $jsonupdate_site = $jsonupdate->UpdateJsonSite($ziplat, $ziplong, $runname, $site_elev);

            // The new json contains user input values and will be written back.
            $jsonupdate_site = json_encode($jsonupdate_site, true, JSON_UNESCAPED_UNICODE);
            //now send evrything to ur data.json file using folowing code
            // Write json output into the run folder
            if (json_decode($jsonupdate_site) != null)
            {
                $file = fopen($jsonrunf_sit,'w');
                fwrite($file, $jsonupdate_site);
                fclose($file);
            }
            else
            {
                echo "json was wrong"; 
            }


            /*
            **------------------------------------------------------------------
            ** Step 6: Readin, modify, write CONT file for model user input
            **------------------------------------------------------------------
            */	
            //Copy json template to userrun
            $jsondft_cont = FD_JSON.'/tmp5_contfile.json'; 
            $jsonrunf_cont= $rundir . "/run_cont.json";		

            if (!copy($jsondft_cont, $jsonrunf_cont)){
            echo "failed to copy $jsondft_cont...\n"	;
            }

            //get contents of your json file and store it in a string
            $jsonupdate_cont = json_decode(file_get_contents($jsonrunf_cont), true);	

            $jsonupdate_cont = $jsonupdate->UpdateJsonCont($genweasimyr, $weadatascflag, $dlystartyr, $dlyendyr);

            // The new json contains user input values and will be written back.
            $jsonupdate_cont = json_encode($jsonupdate_cont, true, JSON_UNESCAPED_UNICODE);
            //now send evrything to ur data.json file using folowing code
            // Write json output into the run folder
            if (json_decode($jsonupdate_cont) != null)
            {
                $file = fopen($jsonrunf_cont,'w');
                fwrite($file, $jsonupdate_cont);
                fclose($file);
            }
            else
            {
                echo "json was wrong"; 
            }        


            /*
            **------------------------------------------------------------------
            ** Step 7: Copy common database to the user folder.
            **------------------------------------------------------------------
            */
            $commondata = array(
                "apexfile"=>"APEXFILE.DAT",
                "apexdim"=>"APEXDIM.DAT",
                "cropcom"=>"CROPCOM.DAT",
                "tillcom"=>"TILLCOM.DAT",
                "pestcom"=>"PESTCOM.DAT",
                "fertcom"=>"FERTCOM.DAT",
                "tr55com"=>"TR55COM.DAT",
                "prnt"=>"PRNT0806.DAT",
                "parm"=>"PARM0806.DAT",
                "mlrn"=>"MLRN0806.DAT",
                "herd"=>"HERD0806.DAT",
                "psocom"=>"PSOCOM.DAT",
                "apexexe"=>APEXEXE);

            foreach($commondata as $cmndt)
            {
                if (!file_exists($rundir."/".$cmndt))
                {copy(FD_APEXDB."/".$cmndt, $rundir."/".$cmndt);}
            }


            /*
            **------------------------------------------------------------------
            ** Step 8: Readin, modify, write RUN file for model user input 
            **------------------------------------------------------------------
            */	
            //Copy json template to userrun
            $jsondft_other = FD_JSON.'/tmp6_other.json'; 
            $jsonrunf_other = $rundir . "/run_other.json";		

            if (!copy($jsondft_other, $jsonrunf_other)){
            echo "failed to copy $jsondft_cont...\n";
            }

            //get contents of your json file and store it in a string
            $jsonupdate_other = json_decode(file_get_contents($jsonrunf_other), true);	

            $jsonupdate_other = $jsonupdate->UpdateJsonOther($ziplat, $ziplong, $runname, $weadatascflag);

            // The new json contains user input values and will be written back.
            $jsonupdate_other = json_encode($jsonupdate_other, true, JSON_UNESCAPED_UNICODE);
            //now send evrything to ur data.json file using folowing code
            // Write json output into the run folder
            if (json_decode($jsonupdate_other) != null)
            {
                $file = fopen($jsonrunf_other,'w');
                fwrite($file, $jsonupdate_other);
                fclose($file);
            }
            else
            {
                echo "json was wrong"; 
            }        

            /*
            **------------------------------------------------------------------
            ** Step 9: Run python to generate input files. 
            **------------------------------------------------------------------
             * This was put together to facilitate the modification
             * of the code when it is incorporated into the linux server
            */        
            // The next step is to call python function to write the .sol file.
            // call the python script to run  
            exec(FD_PY."/py01_json2sol.py "
                        . "$rundir "
                        . "$jsonrunf_sol");         


            // The next step is to call python function to write the .sol file.
            // call the python script to run         
            exec(FD_PY."/py02_json2mgtopc.py "
                    . "$rundir "
                    . "$jsonrunf_mgtops "); 

            // The next step is to call python function to write the .sol file.
            // call the python script to run  
            exec(FD_PY."/py03_json2sub.py $rundir $jsonrunf_sub"); 

            // The next step is to call python function to write the .sol file.
            // call the python script to run  
            exec(FD_PY."/py04_json2site.py $rundir $jsonrunf_sit"); 

            // The next step is to call python function to write the .sol file.
            // call the python script to run  
            exec(FD_PY."/py05_json2cont.py $rundir $jsonrunf_cont"); 

            // The next step is to call python function to write the .sol file.
            // call the python script to run  
            
            exec(FD_PY."/py06_json2runcopyrun.py $rundir $jsonrunf_other");
            

            // Reset the new run variable to prevent new run when the page is refreshed.
            $_SESSION["PROJDATA"]["newrun"]="no";
            }
            
            /*
            **------------------------------------------------------------------
            ** Step 10: Get output files and put them on the webpage.
            **------------------------------------------------------------------
            
             * Based on request, the simulation will be conduct every time. 
             * And the results will be displayed. This will be realized by
             * writing an extra file storing the simulation at each time
             * for one line, then the file will be passed to the hydro_wq_wss
             * variable here. One issue is two runs with same run name. 
             * Actaully, this can be done by adding another variable in the 
             * run name without change a lot.
            */

            // Get the result from each run
            $hydro_wq_wss = $runapex->parsewsseachrun($sessrunlist, $rundir, $hydro_wq_wss);

            // Added on June 6, 2017
            
            // Setup the value of run number for 
            // graph to show 
            // The logic is:
            // 1. If the user does not select, the graph will
            // always be the newest 
            // 2. If the user selected run, update the graph run
            // number.
            
            // First count the total run number
            $totalrunno = 0;
            if (glob($rundir."/*.WSS") != false)
            {
                $totalrunno = count(glob($rundir . "/*.WSS"));
            }
            
            if ($totalrunno == 1)
            {
                $_SESSION["PROJDATA"]["grunno1"] = $totalrunno;
                $_SESSION["PROJDATA"]["grunno2"] = $totalrunno;
            }
            else
            {
                $_SESSION["PROJDATA"]["grunno1"] = $totalrunno-1;
                $_SESSION["PROJDATA"]["grunno2"] = $totalrunno;
            }
            
            // Modified Aug 2, 2017 For Graph
            // Setup the default value of graphrunno
            if (!isset($_REQUEST['GRNO1']))
            {$GrRNo1=$_SESSION["PROJDATA"]["grunno1"];}
            else
            {
                // When the state is updated, the index for
                // county and zipcode and soil shall all be set back to 0
                $GrRNo1 = floatval($_GET["GRNO1"])+1;
            }
           
            // Setup the default value of graphrunno
            if (!isset($_REQUEST['GRNO2']))
            {$GrRNo2=$_SESSION["PROJDATA"]["grunno2"];}
            else
            {
                // When the state is updated, the index for
                // county and zipcode and soil shall all be set back to 0
                $GrRNo2 = floatval($_GET["GRNO2"])+1;
            }

            // Setup the default value of variable
            if (!isset($_REQUEST['GRV1']))
            {$GrV1=1;}
            else
            {
                // When the state is updated, the index for
                // county and zipcode and soil shall all be set back to 0
                $GrV1 = floatval($_GET["GRV1"])+1;
            }
            
            if (!isset($_REQUEST['GRV2']))
            {$GrV2=1;}
            else
            {
                $GrV2 = floatval($_GET["GRV2"])+1;
            }

            // Setup the default value of time scale
            if (!isset($_REQUEST['GRT1']))
            {$GrT1=1;}
            else
            {
                // When the state is updated, the index for
                // county and zipcode and soil shall all be set back to 0
                $GrT1 = floatval($_GET["GRT1"])+1;
            }
            
            if (!isset($_REQUEST['GRT2']))
            {$GrT2=1;}
            else
            {
                $GrT2 = floatval($_GET["GRT2"])+1;
            }

            // To include more results and display charts.
            // Generate arrays for output values. The run process
            // will not be changed.
            // We mainly need additional functions to 
            // get the results into arrays and parse to google charts.
            // Two time frequency: annual and monthly (add control 
            // if user want to see.)
            // Annual results will be get from the AWP file.
            // Monthly resutls will need to be got from the MSA file.
            // The average annual files will still be reported but calculated
            // from annual results, instead of reading from the WSS file.            
            // Get runname list
            $sessrunlist = $rundir . "/SESSIONRUN.LIST";
            $runlist = array();
            $runlist = $runapex->generaterunlist($sessrunlist, $runlist);
                        
            // We will have multiple results, but php function 
            // are only able to return one value. This container 
            // array will contain other arrays.
            $annual_results1 = array();
            $annual_results1 = $runapex->parseawp($sessrunlist, $runlist, $rundir, $GrRNo1);
                        
            // The next is to get the results from the MSA file
            $monthly_results1 = array();
            $monthly_results1 = $runapex->parsemsa($sessrunlist, $runlist, $rundir, $GrRNo1);            
            
            $annual_results2 = array();
            $annual_results2 = $runapex->parseawp($sessrunlist, $runlist, $rundir, $GrRNo2);
                        
            // The next is to get the results from the MSA file
            $monthly_results2 = array();
            $monthly_results2 = $runapex->parsemsa($sessrunlist, $runlist, $rundir, $GrRNo2);            

            $idsp_result = "block";
        }
    }

?>   
    





<?php
    //check for any errors
    if(isset($error))
    {
        foreach($error as $error)
        {
            echo '<h1>'.$error.'</h1>';
        }
    }
    
    unset($error);
?>


<SCRIPT LANGAUGE="JavaScript">
    function init()
    {
        document.graphouts.graphrunlst1.selectedIndex = <?=$GrRNo1-1?>;
        document.graphouts.graphrunlst2.selectedIndex = <?=$GrRNo2-1?>;
        document.graphouts.graphvar1.selectedIndex = <?=$GrV1-1?>;
        document.graphouts.graphvar2.selectedIndex = <?=$GrV2-1?>;        
        document.graphouts.graphvarts1.selectedIndex = <?=$GrT1-1?>;
        document.graphouts.graphvarts2.selectedIndex = <?=$GrT2-1?>;              
    }
    
    function displayleftgraph()
    {
        runidx1 = document.graphouts.graphrunlst1.selectedIndex;
        runidx2 = document.graphouts.graphrunlst2.selectedIndex;
        vidx1 = document.graphouts.graphvar1.selectedIndex;
        vidx2 = document.graphouts.graphvar2.selectedIndex;
        tsidx1 = document.graphouts.graphvarts1.selectedIndex;
        tsidx2 = document.graphouts.graphvarts2.selectedIndex;

        loc = "results.php?GRNO1=" + runidx1;
        loc = loc + "&GRNO2=" + runidx2;
        loc = loc + "&GRV1=" + vidx1;
        loc = loc + "&GRV2=" + vidx2;
        loc = loc + "&GRT1=" + tsidx1;
        loc = loc + "&GRT2=" + tsidx2;
        
        parent.location = loc;
    }

    function displayrightgraph()
    {
        runidx1 = document.graphouts.graphrunlst1.selectedIndex;
        runidx2 = document.graphouts.graphrunlst2.selectedIndex;
        vidx1 = document.graphouts.graphvar1.selectedIndex;
        vidx2 = document.graphouts.graphvar2.selectedIndex;
        tsidx1 = document.graphouts.graphvarts1.selectedIndex;
        tsidx2 = document.graphouts.graphvarts2.selectedIndex;

        loc = "results.php?GRNO1=" + runidx1;
        loc = loc + "&GRNO2=" + runidx2;
        loc = loc + "&GRV1=" + vidx1;
        loc = loc + "&GRV2=" + vidx2;
        loc = loc + "&GRT1=" + tsidx1;
        loc = loc + "&GRT2=" + tsidx2;
        
        parent.location = loc;
    }



</SCRIPT>


    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

        // Load the Visualization API and the corechart package.
        google.charts.load('current', {'packages':['corechart']});

        // Convert php array to java array, using json_encode
        <?php 
            // First get the year list:
            // Two conditions: 
            // 1. weather generator: 1986
            // 2. User entered
            // Each run has a starting year
            // For weather generator, use 1 to extended years.
            // For user entered, use the list from annual
            // results.
            
            // 1. Run 1
            // Get the weather source from run name
            $parm1 = explode("_",$runlist[$GrRNo1-1]);
            $simyrs = count($annual_results1[13]);
            $jsyrlst1 = array();
            
            for ( $yi1 = 0; $yi1<$simyrs; $yi1++)
            {
                if ($parm1[12]==1)
                {array_push($jsyrlst1, $yi1+1);}
                else
                {array_push($jsyrlst1, $annual_results1[13][$yi1]);}
            }

            $json_yrlst1 = json_encode($jsyrlst1);
            echo "var jsyrlst1 = ". $json_yrlst1 . ";\n";
               
            // Variable data
            $js_annvar1 = json_encode($annual_results1[$GrV1-1]);
            echo "var ann_var1 = ". $js_annvar1 . ";\n";
           
            // 2. Run 2
            // Get the weather source from run name
            $parm2 = explode("_",$runlist[$GrRNo2-1]);
            $simyrs2 = count($annual_results2[13]);
            $jsyrlst2 = array();
            
            for ( $yi2 = 0; $yi2<$simyrs; $yi2++)
            {
                if ($parm2[12]==1)
                {array_push($jsyrlst2, $yi2+1);}
                else
                {array_push($jsyrlst2, $annual_results2[13][$yi2]);}
            }
                        
            $json_yrlst2 = json_encode($jsyrlst2);
            echo "var jsyrlst2 = ". $json_yrlst2 . ";\n";
               
            // Variable data
            $js_annvar2 = json_encode($annual_results2[$GrV2-1]);
            echo "var ann_var2 = ". $js_annvar2 . ";\n";
                       
            
            // Monthly results: only 1 list is needed
            // Generate month list
            $jsmonlst1 = array();
            for ( $moni1 = 0; $moni1<12; $moni1++)
            {array_push($jsmonlst1, $moni1+1);}
            
            $json_monlst1 = json_encode($jsmonlst1);
            echo "var jsmonlst1 = ". $json_monlst1 . ";\n";
                   
            // Variable data
            $js_monvar1 = json_encode($monthly_results1[$GrV1-1]);
            echo "var mon_var1 = ". $js_monvar1 . ";\n";
                                              
            // Variable data
            $js_monvar2 = json_encode($monthly_results1[$GrV2-1]);
            echo "var mon_var2 = ". $js_monvar2 . ";\n";
                                   
            
        ?>
        // Set a callback to run when the Google Visualization API is loaded.
        // Draw annual results table
        google.charts.setOnLoadCallback(
            function(){ drawGoogleChartsBarAnnual(
                'chart_prcp1',
                'Annual Precipitation (mm)',
                'Year',
                jsyrlst1,
                js_annvar1,
                'LightBlue',
                  );});

        google.charts.setOnLoadCallback(
            function(){ drawGoogleChartsBarAnnual(
                'chart_prcp2',
                'Annual Precipitation (mm)',
                'Year',
                jsyrlst2,
                js_annvar2,
                'LightBlue',
                  );});





      function drawGoogleChartsBarAnnual(id,yname,xname,xdat,ydat,bcolor) 
      {
        // From the HTML code, find the div to put the chart into
        var chartDiv = document.getElementById(id);

        // Create a google charts data table
        var data = new google.visualization.DataTable();
        data.addColumn('number', xname);
        data.addColumn('number', yname);
        
        // We create a standard javascript array in the [x,y] pair format
        // that Google Charts wants, which we will pass to the DataTable
        var dataRows = [];
        for(var i = 0; i < xdat.length && i < ydat.length; i++) {
            dataRows.push([xdat[i], parseFloat(ydat[i])]);
            
        }
        data.addRows(dataRows);
		
		// Create the Chart Options that we will pass to the Line Chart
		// - Set axis titles
		// - Do not show legend
		var options = {
			series: { 0: {color: bcolor} },
			hAxis: {
				title: xname,
			},
			vAxis: {
				title: yname
			},
			//title: yname,
			'chartArea': {left: 50, top: 20, width: '100%', 'height': '75%'},
			 bar: {groupWidth: '95%'},
			legend: {
				position: 'none'
			},
			explorer: { 
				actions: ['dragToZoom', 'rightClickToReset'],
				axis: 'horizontal',
				keepInBounds: true,
				maxZoomIn: 4.0
			},
		};
		
		// Create and draw the chart
		var chart = new google.visualization.ColumnChart(chartDiv);
		chart.draw(data, options);
	}
    </script>





<div style="display:<?php echo $idsp_result;?>">
        
    <p align="center">
        <font face="Arial Black" size="2">
        Average annual model results (table)&nbsp;
        </font></p>
    
    <hr>
     	<table border="1" width="85%">
	<center>

            <tr>
                <th colspan="1" rowspan="2" ><font size="3"><b>Run order&nbsp;</b></font></th>
                <th colspan="3" ><font size="3"><b>Hydrology(inch)&nbsp;</b></font></th>
                <th colspan="1" rowspan="2"><font size="3"><b>Erosion (ton/ acre)&nbsp;</b></font></th>
                <th colspan="6" rowspan="1" ><font size="3"><b>Nitrogen loss in (kg/acre)&nbsp;</b></font></th>
                <th colspan="4" rowspan="1" ><font size="3"><b>Phosphorus loss in (kg/acre)&nbsp;</b></font></th>
            </tr>
	
            <tr>
                <th>Rain&nbsp;</th>
                <th>Surface runoff&nbsp;</th>
                <th>Tile flow&nbsp;</th>
                <th>Surface runoff&nbsp;</th>
                <th>Tile flow&nbsp;</th>
                <th>Lateral flow&nbsp;</th>
                <th>Quick return flow&nbsp;</th>
                <th>Erosion&nbsp;</th>
                <th>Total N&nbsp;</th>
                <th>Surface runoff&nbsp;</th>
                <th>Erosion&nbsp;</th>
                <th>P from Tile&nbsp;</th>
                <th>Total P&nbsp;</th>
            </tr>

		<?php for ($hrid=0; $hrid<count($hydro_wq_wss);$hrid++){
                        $order = $hrid+1;
                        ?>
		<tr>
                    <td><?php echo "Run".$order; ?></td>
			
                    <td><?php echo $hydro_wq_wss[$hrid][14]; ?></td>
                    <td><?php echo $hydro_wq_wss[$hrid][0]; ?></td>					
                    <td><?php echo $hydro_wq_wss[$hrid][1]; ?></td>

                    <td><?php echo $hydro_wq_wss[$hrid][2]; ?></td>

                    <td><?php echo $hydro_wq_wss[$hrid][4]; ?></td>
                    <td><?php echo $hydro_wq_wss[$hrid][9]; ?></td>					
                    <td><?php echo $hydro_wq_wss[$hrid][7]; ?></td>
                    <td><?php echo $hydro_wq_wss[$hrid][8]; ?></td>			
                    <td><?php echo $hydro_wq_wss[$hrid][3]; ?></td>					
                    <td><?php echo $hydro_wq_wss[$hrid][11]; ?></td>			

                    <td><?php echo $hydro_wq_wss[$hrid][6]; ?></td>					
                    <td><?php echo $hydro_wq_wss[$hrid][5]; ?></td>	
                    <td><?php echo $annual_results2[12]; ?></td>			

                    <td><?php echo $hydro_wq_wss[$hrid][12]; ?></td>			

		</tr>
                <?php } ?>
		
</center>
</table>
    <hr>
    <form method="POST"
        name="graphouts"
        id="graphouts"
        >

    <table width="900">
        <tr>
            <td colspan="2">
                <p align="center">
                    <font face="Arial Black" size="2">
                    Annual model results (Graph)</font></p>
            </td>
        </tr>
        <tr>
            <td>
                <p align="left">
                Select run order: 
                <select size="1" 
                        name="graphrunlst1"
                        id="graphrunlst1"
                        >
                    <?php 
                        for ($rid2=1; $rid2<=count($runlist);$rid2++){
                            print("<option  value=".$rid2.">" . "RUN". $rid2 . "</option>"); }
                            $rid2 = $rid2+1;
                    ?>
                </select>&nbsp;
                <br>
                Select variable:&nbsp;
                <select size="1" 
                        name="graphvar1"
                        id="graphvar1"
                        >
                    <?php 
                        $uilist->listOutVars();
                    ?>
                </select>&nbsp;
                <br>
                Select annual or monthly:&nbsp;
                <select size="1" 
                        name="graphvarts1"
                        id="graphvarts1"
                        >
                    <?php 
                        $uilist->listOutTimeScale();
                    ?>
                </select>&nbsp;
                <br>
                <input type="button"  
                       value="Display" 
                       onClick="Javacsript:displayleftgraph()"
                       name="button1_displeft"
                       id="button1_displeft"
                       >
                </p>
                
            </td>
            
            <td>
                <p align="left">
                Select run order: &nbsp;    
                <select size="1" 
                        name="graphrunlst2"
                        id="graphrunlst2"
                        >
                    <?php 
                        for ($rid3=1; $rid3<=count($runlist);$rid3++){
                            print("<option  value=".$rid3.">" . "RUN". $rid3 . "</option>"); }
                            $rid3 = $rid3+1;
                    ?>
                </select>&nbsp;
                <br>
                Select variable:&nbsp;
                <select size="1" 
                        name="graphvar2"
                        id="graphvar2"
                        >
                    <?php 
                        $uilist->listOutVars();
                    ?>
                </select>&nbsp;
                <br>
                Select annual or monthly:&nbsp;
                <select size="1" 
                        name="graphvarts2"
                        id="graphvarts2"
                        >
                    <?php 
                        $uilist->listOutTimeScale();
                    ?>
                </select>&nbsp;
                <br>
                <input type="button"  
                       value="Display" 
                       onClick="Javacsript:displayrightgraph()"
                       name="button1_dispright"
                       id="button1_dispright"
                       >                
                </p>
            </td>
        </tr>   

        
        <tr>
            <td colspan="2">
                <p align="left">Precipitation (mm)</p>
            </td>
        </tr>        
        
        <tr>
            <td width="450"><div id="chart_prcp1"></div></td>
            <td width="450"><div id="chart_prcp2"></div></td>
        </tr>

    </table>
     
    <br> 
 
    <hr>
       <h3> Run History&nbsp;</h3>
    <table border="1" id="runhist">
        <tr>
            <th>Run order</th>
            <th>State</th>
            <th>County</th>
            <th>Zipcode</th>
            <th>Field area<br>(acre)</th>
            <th>Slope</th>
            <th>Slope length<br>(feet)</th>
            <th>Soil name</th>
            <th>Soil Test N</th>
            <th>Soil Test P</th>
            <th>Management</th>
            <th>Tile depth</th>
            <th>Sim years</th>
            <th>Start year</th>
            <th>End year</th>

        </tr>

        
        <?php for ($hrid=0; $hrid<count($hydro_wq_wss);$hrid++){
            $order = $hrid+1;
            $namearray = explode("_",$hydro_wq_wss[$hrid][13]);
            
                ?>
        <tr>
                <td><?php echo "Run".$order; ?></td>
                <td><?php echo $namearray[1]; ?></td>
                <td><?php echo $namearray[2]; ?></td>
                <td><?php echo $namearray[3]; ?></td>
                <td><?php echo intval(intval($namearray[4])/0.40468+1); ?></td>
                <td><?php echo $namearray[5]; ?></td>
                <td><?php echo intval(intval($namearray[6])/0.3048+1); ?></td>
                <td><?php echo $namearray[7]; ?></td>
                <td><?php echo $namearray[8]; ?></td>
                <td><?php echo $namearray[9]; ?></td>
                <td><?php echo $namearray[10]; ?></td>
                <td><?php echo $namearray[11]; ?></td>
                <td><?php
                    if ($namearray[12]=="1")
                    {echo $namearray[13];}
                    else
                    {echo " ";}
                    ?></td>
                <td><?php
                    if ($namearray[12]=="2")
                    {echo $namearray[14];}
                   else
                    {echo " ";}
                    ?></td>
                <td><?php
                    if ($namearray[12]=="2")
                    {echo explode(".",$namearray[15])[0];}
                    else
                    {echo " ";}
                    ?></td>
        </tr>
        <?php } ?>
    </table>

</form>
      
     

</div>
<br>


<br>

<?php
    include("html/footer.html");
?>